// ================================
// üìÅ indexedDB.js
// ================================
// Este archivo contiene funciones para interactuar con IndexedDB,
// permitiendo guardar pel√≠culas localmente (offline-first).
// üîó Criterio de evaluaci√≥n relacionado: 07_01 (IndexedDB)

// Nombre y versi√≥n de la base de datos
const DB_NAME = 'PiFlixDB';
const DB_VERSION = 2; // Versionamos la DB para poder a√±adir stores si es necesario
const STORE_NAME = 'movies'; // Nombre del almac√©n de pel√≠culas

// ================================
// 1Ô∏è‚É£ Abrir o crear la base de datos
// ================================
export function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);

    // ‚ùå Si hay error al abrir la base de datos
    request.onerror = (event) => {
      console.error('‚ùå Error opening IndexedDB:', event.target.error);
      reject(event.target.error);
    };

    // ‚úÖ Si se abre correctamente
    request.onsuccess = (event) => {
      console.log('‚úÖ IndexedDB opened');
      resolve(event.target.result); // devolvemos la instancia DB
    };

    // üÜï Se ejecuta al crear la DB por primera vez o al cambiar la versi√≥n
    request.onupgradeneeded = (event) => {
      const db = event.target.result;

      // Creamos el store 'movies' si no existe
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME, { keyPath: 'id' }); // usaremos el id como clave primaria
        console.log('üìÅ Store created:', STORE_NAME);
      }
    };
  });
}

// ================================
// 2Ô∏è‚É£ Guardar pel√≠culas en IndexedDB
// ================================
export async function saveMoviesToDB(movies) {
  const db = await openDB(); // abrir conexi√≥n
  const tx = db.transaction(STORE_NAME, 'readwrite'); // transacci√≥n en modo escritura
  const store = tx.objectStore(STORE_NAME); // accedemos al store de pel√≠culas

  // üîÅ Guardamos cada pel√≠cula por su ID
  movies.forEach(movie => {
    store.put(movie); // put: crea o reemplaza si ya existe
  });

  return tx.complete; // devolvemos la promesa que representa el fin de la transacci√≥n
}

// ================================
// 3Ô∏è‚É£ Leer todas las pel√≠culas guardadas
// ================================
export function getAllMovies() {
  return openDB().then(db => {
    return new Promise((resolve) => {
      const tx = db.transaction(STORE_NAME, 'readonly'); // solo lectura
      const store = tx.objectStore(STORE_NAME);
      const request = store.getAll(); // obtenemos todo el contenido del store

      request.onsuccess = () => resolve(request.result); // devolvemos el array de pel√≠culas
    });
  });
}
