// ==========================================
// üì¶ service-worker.js
// ==========================================
// Este archivo registra un Service Worker que:
// ‚úÖ Carga todas las pel√≠culas desde Laravel
// ‚úÖ Guarda esas pel√≠culas y novedades en IndexedDB (HD local)
// ‚úÖ Permite operar en modo offline gracias al almacenamiento local
// ‚úÖ Notifica al usuario si hay novedades nuevas cada 5 minutos
//
// üîó Criterios que cubre:
// - ‚úÖ 07_01: Guardar pel√≠culas en HD con IndexedDB al iniciar SW
// - ‚úÖ 08_01: Guardar videos si no est√°n en HD
// - ‚úÖ 08_01: Mostrar notificaciones push cada 5 min si hay novedades
// ==========================================


// ‚úÖ Importamos funciones desde sw-indexedDB.js (ubicado en /public)
importScripts('/sw-indexedDB.js');


// ==========================================
// 1Ô∏è‚É£ Evento de instalaci√≥n del Service Worker
// ==========================================
self.addEventListener('install', event => {
  console.log('üì¶ Service Worker installing...');
  event.waitUntil(self.skipWaiting()); // Activaci√≥n inmediata
});


// ==========================================
// 2Ô∏è‚É£ Evento de activaci√≥n del Service Worker
// ==========================================
self.addEventListener('activate', event => {
  console.log('üöÄ Service Worker activated');
  event.waitUntil(clients.claim()); // Toma control inmediato
});


// ==========================================
// 3Ô∏è‚É£ Escucha mensajes para lanzar acciones espec√≠ficas
// ==========================================
// Desde main.js enviamos:
// - 'cache-movies' para cargar datos en HD
// - 'start-notifications' para lanzar verificaci√≥n cada 5 minutos
// ==========================================
self.addEventListener('message', event => {
  if (event.data === 'cache-movies') {
    cacheAllMovies(); // Guarda todas las pel√≠culas + novedades
  }

  if (event.data === 'start-notifications') {
    console.log('üîî Iniciando comprobaci√≥n peri√≥dica de novedades...');
    startNovedadPolling(); // Lanza el intervalo para notificar cada 5 min
  }
});


// ==========================================
// 4Ô∏è‚É£ Funci√≥n principal: cacheAllMovies()
// ==========================================
// - Pide a Laravel todas las pel√≠culas paginadas
// - Tambi√©n pide las novedades desde √∫ltimo acceso
// - Guarda todo en IndexedDB (modo HD local)
// ==========================================
async function cacheAllMovies() {
  console.log('üé• Cargando pel√≠culas desde Laravel...');

  let allMovies = [];
  let page = 1;
  let hasMore = true;

  while (hasMore) {
    const response = await fetch(`/api/movies?page=${page}`);
    const data = await response.json();

    if (data.data && data.data.length) {
      allMovies = allMovies.concat(data.data);
      page++;
      hasMore = page <= data.last_page;
    } else {
      hasMore = false;
    }
  }

  try {
    await saveMoviesToDB(allMovies);
    console.log(`‚úÖ Guardadas ${allMovies.length} pel√≠culas`);
  } catch (err) {
    console.error('‚ùå Error guardando pel√≠culas:', err);
  }

  // üî• Guardar tambi√©n novedades
  try {
    const response = await fetch('/api/novelties');
    const novelties = await response.json();
    await saveMoviesToDB(novelties);
    console.log(`‚úÖ Guardadas ${novelties.length} novedades`);
  } catch (err) {
    console.error('‚ùå Error guardando novedades:', err);
  }
}


// ==========================================
// 5Ô∏è‚É£ Funci√≥n startNovedadPolling()
// ==========================================
// - Se llama una vez desde main.js con 'start-notifications'
// - Luego ejecuta cada 5 min una petici√≥n a Laravel
// - Si hay novedades, se lanza una notificaci√≥n
// ==========================================
function startNovedadPolling() {
  setInterval(async () => {
    try {
      console.log('üîç Verificando novedades en segundo plano...');
      const response = await fetch('/api/novelties');
      const data = await response.json();

      if (data.length > 0) {
        console.log(`üîî Hay ${data.length} novedades nuevas!`);
        self.registration.showNotification('üé¨ Nuevas pel√≠culas disponibles', {
          body: `Se han a√±adido ${data.length} pel√≠culas nuevas desde tu √∫ltimo acceso.`,
          icon: '/image/logo.jpeg', // üß† icono opcional desde /public/image
          tag: 'novedades',         // Evita duplicar la misma notificaci√≥n
          renotify: true            // Vuelve a mostrar si ya est√° activa
        });
      } else {
        console.log('‚ÑπÔ∏è Sin novedades nuevas');
      }
    } catch (err) {
      console.error('‚ùå Error al verificar novedades para notificaci√≥n:', err);
    }
  }, 60 * 1000); // ‚úÖ Cada 5 minutos (para pruebas puedes poner 60 * 1000) si no son pruebas poner *5*60*100
}
