// ================================
// üì¶ sw-indexedDB.js
// ================================
// Este archivo define funciones para que el Service Worker
// pueda acceder y almacenar pel√≠culas en IndexedDB.
// Es utilizado por `service-worker.js` para guardar en HD todas las pel√≠culas
// y las novedades al iniciar la aplicaci√≥n (modo offline).

// üîó Criterios de evaluaci√≥n implicados:
// ‚úÖ 07_01: Guardar pel¬∑l√≠cules en HD amb indexedDB ‚Üí en iniciar SW, carregar store
// ‚úÖ 08_01: Videos ‚Üí guardar pel√≠culas que incluyen URLs de v√≠deo


// ================================
// üìÅ Configuraci√≥n de la base de datos
// ================================
const DB_NAME = 'PiFlixDB';         // Nombre de la base de datos
const DB_VERSION = 2;               // Versi√≥n actual (subida a 2 si hubo cambios)
const STORE_NAME = 'movies';        // Nombre del store que contiene las pel√≠culas


// ================================
// 1Ô∏è‚É£ openDB()
// ================================
// Abre o crea la base de datos si no existe
function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open(DB_NAME, DB_VERSION);

    // ‚ö†Ô∏è Error al abrir
    request.onerror = (event) => {
      console.error('‚ùå Error opening IndexedDB:', event.target.error);
      reject(event.target.error);
    };

    // ‚úÖ Base de datos abierta correctamente
    request.onsuccess = (event) => {
      resolve(event.target.result);
    };

    // üîß Si es primera vez o hay cambio de versi√≥n
    request.onupgradeneeded = (event) => {
      const db = event.target.result;

      // Creamos el store si no existe
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME, { keyPath: 'id' }); // clave primaria: id de pel√≠cula
      }
    };
  });
}


// ================================
// 2Ô∏è‚É£ saveMoviesToDB(movies)
// ================================
// Guarda un array de pel√≠culas en IndexedDB
function saveMoviesToDB(movies) {
  return openDB().then(db => {
    return new Promise((resolve, reject) => {
      const tx = db.transaction(STORE_NAME, 'readwrite'); // Transacci√≥n en modo escritura
      const store = tx.objectStore(STORE_NAME);           // Accedemos al store

      // Guardamos cada pel√≠cula individualmente
      movies.forEach(movie => {
        store.put(movie); // put = insert o update por id
      });

      // ‚úÖ Todo correcto
      tx.oncomplete = () => {
        resolve();
      };

      // ‚ö†Ô∏è Error en la transacci√≥n
      tx.onerror = (event) => {
        console.error('‚ùå Error en transacci√≥n:', event.target.error);
        reject(event.target.error);
      };
    });
  });
}


// ================================
// 3Ô∏è‚É£ Exponer funciones al Service Worker
// ================================
// Estas funciones estar√°n disponibles dentro de `service-worker.js`
self.saveMoviesToDB = saveMoviesToDB;
self.openDB = openDB;
